package gov.nic.repository;

import java.util.List;
import gov.nic.model.JsonRootBean;
import gov.nic.model.ReturnR9Cnt;
import gov.nic.model.ReturnR9CntDet;

public interface GstR9CRepository {

	public static final String QRY_R9C_ADT_DET = "MERGE INTO GST_RET_R9C_AUDIT_DET TARGET "
			+ "USING (SELECT ? AS GSTIN, ? AS RET_PRD, ? AS FILL_DT, ? AS LEGAL_NM, ? AS TRADE_NM, ? AS ACT_NM, "
			+ " ? AS IS_AUDITOR, ? AS ARN, ? AS ARN_DT, ? AS SIGNATORY_NM, ? AS DESIGNATION, "
			+ " ? AS ADD_LIAB_PLACE, ? AS SIGNATORY, ? AS MEM_NO, ? AS DT, ? AS PAN_NO, "
			+ " ? AS B_NO, ? AS F_NO, ? AS B_NM, ? AS ST_NM, ? AS CITY, ? AS DIST, "
			+ " ? AS STATE, ? AS PIN_CD, ? AS API_DT FROM DUAL) SOURCE "
			+ " ON (TARGET.GSTIN = SOURCE.GSTIN AND TARGET.RET_PRD = SOURCE.RET_PRD) "
			+ " WHEN MATCHED THEN "
			+ "UPDATE SET TARGET.FILL_DT = SOURCE.FILL_DT, TARGET.LEGAL_NM = SOURCE.LEGAL_NM, "
			+ "TARGET.TRADE_NM = SOURCE.TRADE_NM, TARGET.ACT_NM = SOURCE.ACT_NM, TARGET.IS_AUDITOR = SOURCE.IS_AUDITOR, "
			+ "TARGET.ARN = SOURCE.ARN, TARGET.ARN_DT = SOURCE.ARN_DT, TARGET.SIGNATORY_NM = SOURCE.SIGNATORY_NM, "
			+ "TARGET.DESIGNATION = SOURCE.DESIGNATION, TARGET.ADD_LIAB_PLACE = SOURCE.ADD_LIAB_PLACE, "
			+ "TARGET.SIGNATORY = SOURCE.SIGNATORY, TARGET.MEM_NO = SOURCE.MEM_NO, TARGET.DT = SOURCE.DT, "
			+ "TARGET.PAN_NO = SOURCE.PAN_NO, TARGET.B_NO = SOURCE.B_NO, TARGET.F_NO = SOURCE.F_NO, "
			+ "TARGET.B_NM = SOURCE.B_NM, TARGET.ST_NM = SOURCE.ST_NM, TARGET.CITY = SOURCE.CITY, "
			+ "TARGET.DIST = SOURCE.DIST, TARGET.STATE = SOURCE.STATE, TARGET.PIN_CD = SOURCE.PIN_CD, "
			+ "TARGET.API_DT = SOURCE.API_DT "
			+ "WHEN NOT MATCHED THEN "
			+ "INSERT (GSTIN, RET_PRD, FILL_DT, LEGAL_NM, TRADE_NM, ACT_NM, IS_AUDITOR, ARN, ARN_DT, SIGNATORY_NM, "
			+ "DESIGNATION, ADD_LIAB_PLACE, SIGNATORY, MEM_NO, DT, PAN_NO, B_NO, F_NO, B_NM, ST_NM, CITY, DIST, "
			+ "STATE, PIN_CD, API_DT) "
			+ "VALUES (SOURCE.GSTIN, SOURCE.RET_PRD, SOURCE.FILL_DT, SOURCE.LEGAL_NM, SOURCE.TRADE_NM, SOURCE.ACT_NM, "
			+ "SOURCE.IS_AUDITOR, SOURCE.ARN, SOURCE.ARN_DT, SOURCE.SIGNATORY_NM, SOURCE.DESIGNATION, "
			+ "SOURCE.ADD_LIAB_PLACE, SOURCE.SIGNATORY, SOURCE.MEM_NO, SOURCE.DT, SOURCE.PAN_NO, SOURCE.B_NO, "
			+ "SOURCE.F_NO, SOURCE.B_NM, SOURCE.ST_NM, SOURCE.CITY, SOURCE.DIST, SOURCE.STATE, SOURCE.PIN_CD, "
			+ "SOURCE.API_DT)";

	public static final String QRY_R9C_ADT_TAB5 = "MERGE INTO GST_RET_R9C_TAB5 TARGET "
			+ "USING (SELECT ? AS GSTIN, ? AS RET_PRD, ? AS ARN, ? AS TURN_OVR, ? AS UNBIL_REV_BEG, "
			+ " ? AS UNADJ_ADV_END, ? AS DMD_SUP, ? AS CRD_NTS_ISSUED, ? AS TRD_DIS, "
			+ " ? AS TURNOVR_APR_JUN, ? AS UNBIL_REV_END, ? AS UNADJ_ADV_BEG, ? AS CRD_NOTE_ACC, "
			+ " ? AS ADJ_DTA, ? AS TURNOVR_COMP, ? AS ADJ_TURN_SEC, ? AS ADJ_TURN_FEF, "
			+ " ? AS ADJ_TURN_OTHRSN, ? AS ANNUL_TURN_ADJ, ? AS ANNUL_TURN_DECL, "
			+ " ? AS UNREC_TURNOVR,? AS LOG_DT FROM DUAL) SOURCE "
			+ "ON (TARGET.GSTIN = SOURCE.GSTIN AND TARGET.RET_PRD = SOURCE.RET_PRD AND TARGET.ARN = SOURCE.ARN) "
			+ "WHEN MATCHED THEN " + "UPDATE SET TARGET.TURN_OVR = SOURCE.TURN_OVR, "
			+ "TARGET.UNBIL_REV_BEG = SOURCE.UNBIL_REV_BEG, " + "TARGET.UNADJ_ADV_END = SOURCE.UNADJ_ADV_END, "
			+ "TARGET.DMD_SUP = SOURCE.DMD_SUP, " + "TARGET.CRD_NTS_ISSUED = SOURCE.CRD_NTS_ISSUED, "
			+ "TARGET.TRD_DIS = SOURCE.TRD_DIS, " + "TARGET.TURNOVR_APR_JUN = SOURCE.TURNOVR_APR_JUN, "
			+ "TARGET.UNBIL_REV_END = SOURCE.UNBIL_REV_END, " + "TARGET.UNADJ_ADV_BEG = SOURCE.UNADJ_ADV_BEG, "
			+ "TARGET.CRD_NOTE_ACC = SOURCE.CRD_NOTE_ACC, " + "TARGET.ADJ_DTA = SOURCE.ADJ_DTA, "
			+ "TARGET.TURNOVR_COMP = SOURCE.TURNOVR_COMP, " + "TARGET.ADJ_TURN_SEC = SOURCE.ADJ_TURN_SEC, "
			+ "TARGET.ADJ_TURN_FEF = SOURCE.ADJ_TURN_FEF, " + "TARGET.ADJ_TURN_OTHRSN = SOURCE.ADJ_TURN_OTHRSN, "
			+ "TARGET.ANNUL_TURN_ADJ = SOURCE.ANNUL_TURN_ADJ, " + "TARGET.ANNUL_TURN_DECL = SOURCE.ANNUL_TURN_DECL, "
			+ "TARGET.UNREC_TURNOVR = SOURCE.UNREC_TURNOVR, " + "TARGET.LOG_DT = SOURCE.LOG_DT "
			+ "WHEN NOT MATCHED THEN "
			+ "INSERT (GSTIN, RET_PRD, ARN, TURN_OVR, UNBIL_REV_BEG, UNADJ_ADV_END, DMD_SUP, CRD_NTS_ISSUED, TRD_DIS, "
			+ "TURNOVR_APR_JUN, UNBIL_REV_END, UNADJ_ADV_BEG, CRD_NOTE_ACC, ADJ_DTA, TURNOVR_COMP, ADJ_TURN_SEC, "
			+ "ADJ_TURN_FEF, ADJ_TURN_OTHRSN, ANNUL_TURN_ADJ, ANNUL_TURN_DECL, UNREC_TURNOVR,LOG_DT) "
			+ "VALUES (SOURCE.GSTIN, SOURCE.RET_PRD, SOURCE.ARN, SOURCE.TURN_OVR, SOURCE.UNBIL_REV_BEG, "
			+ "SOURCE.UNADJ_ADV_END, SOURCE.DMD_SUP, SOURCE.CRD_NTS_ISSUED, SOURCE.TRD_DIS, "
			+ "SOURCE.TURNOVR_APR_JUN, SOURCE.UNBIL_REV_END, SOURCE.UNADJ_ADV_BEG, SOURCE.CRD_NOTE_ACC, "
			+ "SOURCE.ADJ_DTA, SOURCE.TURNOVR_COMP, SOURCE.ADJ_TURN_SEC, SOURCE.ADJ_TURN_FEF, "
			+ "SOURCE.ADJ_TURN_OTHRSN, SOURCE.ANNUL_TURN_ADJ, SOURCE.ANNUL_TURN_DECL, SOURCE.UNREC_TURNOVR,SOURCE.LOG_DT)";

	public static final String QRY_R9C_ADT_TAB6 = "INSERT INTO GST_RET_R9C_TAB6(GSTIN,RET_PRD,ARN,NUM_CD,DESC_DET,LOG_DT)VALUES(?,?,?,?,?,?)";

	public static final String QRY_R9C_ADT_TAB7 ="MERGE INTO GST_RET_R9C_TAB7 target USING (SELECT ? AS GSTIN, ? AS RET_PRD, "
			+ "? AS ARN, ? AS ANNUL_TURN_ADJ, ? AS OTHR_TURNOVR, ? AS ZERO_SUP, ? AS REV_SUP, ? AS TAX_TURN_ADJ, ? AS TAX_TURN_ANNUL, "
			+ "? AS UNREC_TAX_TURN, ? AS LOG_DT FROM DUAL) source ON (target.GSTIN = source.GSTIN AND target.RET_PRD = source.RET_PRD) "
			+ "WHEN MATCHED THEN "
			+ "UPDATE SET "
			+ "target.ARN = source.ARN,target.ANNUL_TURN_ADJ = source.ANNUL_TURN_ADJ,target.OTHR_TURNOVR = source.OTHR_TURNOVR,"
			+ "target.ZERO_SUP = source.ZERO_SUP,target.REV_SUP = source.REV_SUP,target.TAX_TURN_ADJ = source.TAX_TURN_ADJ,"
			+ "target.TAX_TURN_ANNUL = source.TAX_TURN_ANNUL,target.UNREC_TAX_TURN = source.UNREC_TAX_TURN,"
			+ "target.LOG_DT = source.LOG_DT "
			+ "WHEN NOT MATCHED THEN "
			+ "INSERT (GSTIN, RET_PRD, ARN, ANNUL_TURN_ADJ, OTHR_TURNOVR, ZERO_SUP,REV_SUP, TAX_TURN_ADJ, TAX_TURN_ANNUL,"
			+ "UNREC_TAX_TURN, LOG_DT) VALUES (source.GSTIN, source.RET_PRD, source.ARN, source.ANNUL_TURN_ADJ, "
			+ "source.OTHR_TURNOVR, source.ZERO_SUP, source.REV_SUP, source.TAX_TURN_ADJ,source.TAX_TURN_ANNUL, "
			+ "source.UNREC_TAX_TURN, source.LOG_DT)";
	
	
	public String insertR9CData(List<JsonRootBean> jsonRtBnList, List<ReturnR9CntDet> retR9CntList,
			ReturnR9Cnt retR9Cnt, String dt) throws Exception;
}
